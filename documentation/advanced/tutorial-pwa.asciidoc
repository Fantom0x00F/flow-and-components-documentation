---
title: PWA resources
order: 16
layout: page
---

= PWA resources

Progressive Web Applications require some resources to give end-user installable app experience.
These basic resources are

- *Web Manifest* - describes the application
- *Service Worker* - javascript worker installed in client side. Service worker is able (among other things) serve responses from cache and handle push notifications.

Also to get proper experience

- *Cached resources* - any resources that are required to either speed up or make user experience even when there's no connection to server.
- *Icons* - including different sizes of application icon so that there's a suitable image as browser fav icon, installed web app icon on desktop and in application splash screens for different sizes of devices.

Flow server is able to serve automatically a basic version of all these resources.



== Enabling PWA

To enable automatic PWA resource serving annotate the application with `@PWA` annotation.

There may be only single `@PWA` -annotation per application and must be placed in parent layout of application, or if parent layout is not used, then in a view annotated with `@Route`.


== @PWA -annotation properties

* *name* - full name of application. Used in manifest, property *name*. Required.
* *shortName* - short name for application. Used in manifest, property *short_name*. Required.
* *description* - description for application.  Used in manifest, property *description*. Optional, default value empty string.
* *display* - defines how application should use display. Used in manifest, property *display*. Possible values _fullscreen_, _standalone_, _minimal-ui_ and _browser_. Optional, default value value _standalone_
* *backgroundColor* - background_color property is used on the splash screen when the application is first launched. Used in manifest, property *background_color*. Optional, default value _#f2f2f2_
* *themeColor* - theme_color sets the color of the tool bar, and in the task switcher. Used in manifest, property *theme_color*. Also used in header meta tags _theme-color_ and _apple-mobile-web-app-status-bar-style_. Optional, default value _#ffffff_
* *iconPath* - path to icon image. This is path where flow scans for icon image. It’s also used as base name for different sizes of images. For example, if icon path would be _icons/icon.png_ (default value) then 96x96 size image would be of name _icons/icon-96x96.png_. Multiple sizes of icons will be generated from given icon file and linked to in header and manifest. Optional, default value _icons/icon.png_
* *manifestPath* - path to manifest file. It’s the path the Flow will serve the generated manifest file. Optional, default value _manifest.webmanifest_
* *offlinePath* - path to offline fallback file. It’s the path the Flow will scan for the offline fallback file. Optional, default value _offline.html_
* *startPath* - application start url for installed apps. Used in manifest, property *start_url*. Optional, default value root ("/").
* *offlineResources* - list of files that service worker should cache. Optional.
* *enableInstallPrompt* - if enabled, flow will automatically add needed html and js required for app install. This allows app installing on Chrome 68+. See https://developers.google.com/web/fundamentals/app-install-banners/ . Optional, default value true.

== Web manifest

Flow automatically creates manifest file. File contents are created in flow startup and stored in memory. Overriding generated manifest can be done by serving the same file from webapp folder. By default the manifest file is _manifest.webmanifest_, so creating file with name _manifest.webmanifest_ in webapp directory will override the generated one.

== Icons

By placing a icon file in iconPath (within resources folder, preferably webapp -folder) Flow will scan it in startup and create different sizes of images of given image. Icon should be in png -format. If no icon is found Flow will fall back to default image.

Given image is resized to different sizes for different use cases, so use image with size of at least 512x512.

Images are added in bootstrap header as links and in manifest file as icons. All generated images can be overridden by placing image with same name and path in webapp folder (or otherwise serve it as static content).

== Service worker

A simple service worker will be generated in startup. Service worker caches offline resources: offline fallback page, icons and user defined offlineResources. Service worker also handles simple navigation in offline by serving offline fallback page.

Service worker uses Workbox (https://developers.google.com/web/tools/workbox/) for caching resources. Needed workbox files are served by Flow, from directory “_VAADIN/resources/workbox/_”.

Generated service worker can be overridden by placing own service worker file “_sw.js_” in webapp root, or otherwise serving the matching file: “_sw.js_” at application root.

== Offline fallback page

Offline experience out-of-the-box is very straightforward: in case of browser navigation in offline mode the service worker will serve the offline page (that’s file in offlinePath - in webapp folder -  or fallback file if it’s not available).

Note that navigating with in Flow application is not a browser navigation. Navigating straight to an address, or reloading a page are navigation actions that will be caught by service worker.

== Better offline experience

Offline experience with simple fallback is very limited. But by web component technology one can create lots of support for offline. It doesn’t still solve navigating offline/client side -first scenario, but  for that there’s a upcoming feature in Flow. While that feature is not yet available it will be depending on web components. So adding offline support in web components is both good practice and also helps getting ready for new feature in Flow.

== Usage

Get Beverage Buddy (https://vaadin.com/start/v10-simple-ui) and import it to your IDE.

=== Basic usage

Add following annotation to Mainlayout -class and start up the application:
@PWA(name = "My Beverage Buddy", shortName = "Bev Buddy")

Now starting the application Flow will serve basic PWA resources: manifest, service worker, offline fallback and icons.

@PWA annotation must be placed in main layout of application. That is the parent class in @Route annotations layout() -property. If no parent layout is used, then @PWA annotation must be placed in the view with @Route -annotation.


=== Adding icon

If no icon was given, Flow will fall back to default icon, but having a own icon is possible: copy own icon with name and path as defined in iconPath property in @PWA annotation. So if iconPath would be “icons/icon.png”, copy icon image in webapp/icons -folder named icon.png.

Icons are created with downscaling and background filling, so for best results use (at least) 512x512 image with transparent background. Use only images in png -format.


=== Custom offline page

Flow will automatically serve generated offline page. To use own offline page create file matching the offlinePath. That file is precached by service worker and displayed if there’s no connection to the server.

Offline page may only use resources found in precache. By default, in precache there’s only the offline page, manifest and icons. If offline page needs other resources (such as css, images, js) describe those in offlineResources.

Example: if *offline.html* uses *styles/offline.css*, *img/offline.jpg* and *js/jquery.js*, add parameter `offlineResources = { "styles/offline.css", "js/jquery.js", "img/offline.jpg"}` to `@PWA` -annotation.


== To be noted

=== Access control

It’s noteworthy to remind that when using any sort of access control / security, it should  allow the pwa-resources as static resources.
The served resources are:

- Service worker, _sw.js_ at root ("/sw.js")
- Web manifest, named in *manifestPath*
- Offline fallback page, named in *offlinePath*
- Icons, named in *iconPath*, so that each version of icon has name resolved by iconPath and size. So icon with size of 512 x 512 and iconPath value of “icons/icon.png” would resolve the icon name as “icons/icon-512x512.png”. There are different sizes of icons generated automatically. Different sizes/names can be checked from html headers and manifest -file.
- Workbox files - used by service worker - at "_VAADIN/resources/workbox/*_"
- All files introduced in *offlineResources*

=== Lighthouse

Lighthouse is a built in tool to Google Chrome to make different audits to web pages, including pwa audit.

There’s a feature in Google Lighthouse -tool that doesn’t give pwa readiness of 100/100 to Flow applications by default. This is false negative issue, that tells that application is not installable. By adding some route (other than “”) to startPath (and serving that route) will result in getting 100/100 from test.

If application is that simple that only single view is needed and making another view just to score 100 from test feels over-engineering, developer could add RouteAlias next to route, to serve that extra route to get 100/100.
